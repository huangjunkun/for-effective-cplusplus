/**
** project name:  for-effective-cplusplus
** date:          2011-12-20 14:25
** author:        junkun huang
** e-mail:        huangjunkun@gmail.com
** declare: 
  该工程存放内容说明，在学习《Effective C++》过程中，编写的测试性和研究性的代码。欢迎交流，谢谢！
  实验环境说明： Windows + CodeBlocks + MinGW
  btw. 遗失了一部分啊，>_< ...
**/
			《Effective C++》点滴

/////////////////////////////// Unit1.h ///////////////////////////////
// ====================================================================
// --- 条款01：视C++ 为语言联邦 ...
// 注意：
// 1    C++ 高效编程守则视状况（C++ 相关次语言）而变化，取决于你使用C++的哪一部分
// 2    C++ 次语言主要包括四个：///////////////
//      C
//      Object_Orirnted C++
//      Template C++
//      STL
// 3
// ====================================================================
// --- 条款02：尽量以const，enum，inline替换 #define
// 注意：
// 1    对于单纯变量，最好以const 对象或是 enumS 替换 #defineS 。。。
// 2    对于形似函数的 宏（mactos），最好改用inline(结合 template) 函数替换 #defineS ...
// 3
// ====================================================================
// --- 条款03：尽量使用 const ...
// 注意：^ ^ ……
// ====================================================================
// --- 条款04：确定对象被使用前先被初始化 ...


// === 二、构造/析构/赋值运算 ============================================
// ====================================================================
// --- 条款05：了解C++ 默默编写并调用的哪些函数：
//     （默认）构造函数，析构函数，赋值函数，复制构造函数
// 注意：
// 1    编译期可以暗自为class 创建 default 构造函数，copy构造函数，copy assignment
//      操作符，以及析构函数 ...
// ====================================================================
// --- 条款06：若不想实验编译器自动生成的函数，就该明确拒绝
// 注意：
// 1    为驳回编译器自动（暗自）提供的机能，可将相应的成员函数声明为private or protected
//      并且不予实现。使用像Uncopyable这样的base class 也是一种做法
// ====================================================================
// --- 条款07：为多态基类声明virtual 析构函数 ...
// 注意：
// 1    polymorphic（多态的）base class 应该声明一个virtual 析构函数。
//      如果class带有任何virtual函数，她应该拥有一个virtual析构函数
// 2    class 的设计目的如果不是作为base class使用，或不是为了具备多态性
//      就不应该声明一个virtual 析构函数 ...
// ====================================================================
// --- 条款08：别让异常逃离析构函数 ...
// 注意：
// 1    析构函数绝对不要吐出异常。如果一个呗析构函数调用的函数可能抛出异常，
//      那么在析构函数内应该捕捉任何异常，然后吞下它们（不传播）或是结束程序...
// 2    如果客户需要对某个操作函数运行期抛出的异常做出反应，那么class 应该提供
//      一个普通的函数（而非在系后函数中）执行该操作 ...
// ====================================================================
// --- 条款09：绝不vuz构造和析构过程中调用virtual 函数 ...
// 注意：
// 1    在构造和析构过程中不要调用virtual函数，因为这类调用从不下降只derived class
//      （比起当前执行构造和析构函数的那一次 class）
// ====================================================================
// --- 条款10：令operator= 返回一个 referance to *this
// 注意：
// 1    令赋值（assignment）操作符返回一个 reference tio *this ...
// ====================================================================
// --- 条款11：在operator= 中处理“自我赋值” ...安全处理 ...
// 注意：
// ====================================================================
// --- 条款12：赋值对象时勿忘其每一成分
// 注意：
// 1    copying函数一个确保复制”对象内的所有成员变量“及”所有base class 成员(成分)“
// 2    不要尝试以某个copying函数实现另一个copying函数。一个将共同机能（操作）
//      封装在第三个函(private or protected)中，并由copying函数共同调用...

/////////////////////////////// Unit2.h ///////////////////////////////

// === 三、资源管理 =================================================
// --- 条款13：对对象管理资源 ...
// 注意：
// 1    为防止资源泄露，请使用RAII对象，它们在构造函数中获得资源并在析构函数中释放资源
// 2    两个常被使用是RAII classed 分别是tr1::shareed_ptr 和 auto_ptr 。前者通常是较佳的
//      选择,因为其copy行为比较直观。若选择auto_ptr ，复制动作会使它（被复制物）指向null ...
// --- 条款14：在资源管理类中心小心copying 行为 ...
// 注意：RAII（Resource Acquisition Is Initialization）资源取得时机即是初始化时机....
// 1    复制RAII对象必须一并复制它所管理的资源，所以资源的coping行为决定RAII对象的copying行为
// 2    普遍而常见的RAII class copying行为时：御制copying、施行引用计数法（reference counting）。
//      不过其他行为也可能被实现 ...
// --- 条款15：在资源管理类中提供对原始资源的访问 ...
// 注意：
// 1    APIs往往要求访问原始资源（raw resouces），因此对于每一个RAII class 应该提供一个“取得
//      其所管理之资源”的办法 ...
// 2    对原始资源的访问可能经由显式转换或是隐式转换，一般而言显式转化比较安全，但隐式转化对于用户比较方便 ...
// --- 条款16：成对使用new 和 delete 时采用相同形式 ...new-delete ,new[]-delete[]
// 注意：
// 1    如果你在表达式中使用[] ，必须在相应的delete表达式中使用[]。反之亦然 ....
// --- 条款17
// 注意：以独立语句将new（newed）对象置入智能指针 ...
// 1    以独立语句将new（newed）对象置入智能指针内，如果不这样做，一旦异常被抛出，
//      有可能导致难以察觉的资源泄露 ....（智能指针可以应对异常的资源析构 ... ）
// === 四、设计与声明 =================================================

// --- 条款18：让接口容易被使用，不易被误用 ...
// 注意：
// 1    好的接口很容易被正确使用，不容易被误用。你应该在你的所有接口中哪里达成这些性质。
// 2    “促进正确使用：的办法包括接口的一致性，以及与内置类型的行为兼容
// 3    阻止误用的办法包括建立新类型、限制类型上的操作，束缚对象值，以及消除客户的资源管理责任
// 4    tr1：：shared_ptr 支持定制型删除器（custom deleter）。这可防范DLL问题，可被用来自动解除
//      互斥锁等等 ...
// --- 条款19：设计class 犹如设计type ...
// 注意：
// 1    class 的设计就得type 的设计 。在定义一个新type之前，请确定你已经考虑过以下主题：
//  1)  新的对象应该被如何的创建和销毁 ...？
//  2)  对象的初始化和对象的赋值应该有什么样的差别？
//  3)  新的type对象如果被passed by value（以值传递），意味着什么 ？
//  4)  什么是新type 的合法值 ？
//  5)  你的新type需要配合某个继承图系吗？（inheritance graph）
//  6)  你的新type需要什么样的转化？
//  7)  什么样的操作符和函数对此type而言是合理的 ？
//  8)  什么样的标准函数应该驳回 ？
//  9)  谁该取用新的type 的成员？
//  10)  什么是新type的”为声明的接口“？
//  11)  你的新type有多么一般化？
//  12)  你真的需要一个新 type吗？
// 2
// --- 条款20：宁以pass-by-reference-to-const替换pass-by-value ....
// 注意：
// 1    尽量以pass-by-reference-to-const替换pass-by-value。前者通常比较高效，并可以避免（对象的）切割问题
// 2    以上规则并不适用于内置类型，以及STL的迭代器和函数对象。对它们而言，pass-by-value往往比较适当 ...
// --- 条款21：必须返回对象时，别妄想返回其 reference ...
// 注意：
// 1    绝不要返回pointer或reference 指向一个 local stack 对象，或返回reference 指向一个heap-allocated
//      对象，或返回pointer或是reference指向一个local static 对象而有可能同时需要多个这样的对象。
//      条款4 已经为”在单线程环境中合理返回 reference 指向一个 local static 对象“ 提供一份设计实例 ...
// --- 条款22：将成员函数声明为 private ...
// 注意：
// 1    切记将成员变量声明为private 。这可赋予客户访问数据的一致性，可细微区分访问控制，
//      允许约束条件获得保证，并提供class 作者以充分的实现弹性 ...
// 2    其实，protected 并不比 public 更具封装性 ....
// --- 条款23：宁以non-member、non-friend 替换 member 函数...
// 注意：
// 1    宁以non-member、non-friend 替换 member 函数.。这样做可以在家封装性、包裹弹性
//      (packaging flexibility ) 和机能扩充性 ...
// --- 条款24：若所有参数皆需类型转换(隐式)，请为此采用non-member函数 ...
// 注意：
// 1    如果你需要为某个函数的所有参数（包括呗this指针所指的那个隐喻参数）进行类型转型，
//      那么这个函数必须是个 non-member ...
// --- 条款25：考虑写出一个不抛出异常的 swap 函数 ...
// 注意：
// 1    当 std::swap 对你的类型效率不高时，提供一个swap成员函数，并确定这个函数不抛出异常
// 2    如果你提供一个member swap ，也提供一个non-member swap 用来调用前者。对于classes
//      （而非templates），也请特化 std::swap 。
// 3    调用 swap 时硬针对std::swap 使用 using 声明式，日后调用swap并且不带任何”命名空间资格修饰“
// 4    为”用户自定义类型“进行全特化的好的，但千万不要尝试在std 内加入某些对 std而言全新的东西 ....


/////////////////////////////// Unit3.h ///////////////////////////////

// ===  五、实现 ======================================================
// ====================================================================
// --- 条款26：尽可能延后变量定义式的出现时间 ...
// 注意：
// 1    尽可能延后变量定义式的出现时间，这样做可以增加程序的清晰度并改善程序的效率
// ====================================================================
// --- 条款27：尽量少做转型动作 ...
// 注意：static_cast ,dynamic_cast ,const_cast ,reinterpret_cast ... XXX_cast<Type> (Expr)...
// 1    如果可以尽量少做转型（避免），特别是注重效率的代码中，避免dynamic_cast S。
//      如果有个设计需要转型动作，试着发展无需转型的替代设计 ....
// 2    如果转型的必须的，试着将它隐藏于某个函数背后。客户随后可以调用该函数，
//      而不需将转型放进他们的自己代码内。
// 3    宁可使用 C++ Style（新式）转型，不要实验旧式转型。前者很容易辨别出来，
//      而且也比较有着分门别类的职掌 。
// ====================================================================
// --- 条款28：避免返回handles 指向对象的内部成分 ...
// 注意：
// 1    避免返回 handles（包括references、指针、迭代器）指向对象内部。遵守这个条款
//      可以增加程序的封装性，帮助const 成员函数的行为像个const，并将发生“需吊号码牌”
//      (dangling handles) 的可能性降低至最低 ...
// ====================================================================
// --- 条款29：为“异常安全”而努力时值得的
// 注意：
// 1    异常安全函数( Exception-safe functions)即使发生异常也不会泄露资源或允许任何函数
//      结构败坏。这样的函数区分为三种可能的保证：基本(承诺)型、强烈型、不抛异常型。
// 2    “强烈保险”往往能够以copy-and-swap实现出来，但“强烈保证”并非对所有函数都可以实现
//      或是具备现实意义 ...
// 3    函数提供的“异常安全保证”通常最高只等于其所调用函数中的“异常安全保证”中的最弱者 。
// ====================================================================
// --- 条款30：透彻了解 inlining (inline) 的里里外外 ...
// 注意：inline 是个申请，编译器可以加以忽略(若 inline 函数过于复杂) ...
// 1    将大多数inlining限制在小型，被频繁调用的函数身上。这可使日后的调试过程
//      和二进制升级(binary upgradability)更容易，也可使潜在的代码膨胀问题最小化，
//      使程序的速度提升机会最大化 ...
// 2    不要只因为 function templateS 出现在头文件，就将它们声明 inline 。
// 3    编译器通常不对“通过函数指针而进行的调用”实施inlining ...有时包括构造函数
//      与析构函数 ... 有时候编译器会自动生成两者的outline 副本 ...往往(实际上)
//      构造和析构函数的inlining的糟糕候选，记住：编译器会自动为构造，析构扩充代码
// ====================================================================
// --- 条款31：将文件间的编译依存关系降至最低 ...
// 注意：
// 1    支持“编译依存性最小化”的一般构想是：相依于声明式，不要相依于定义式。
//      基于此构想的两个手段是： Handle classes 和 Interface clases ...
// 2    程序库头文件应该以“完全且仅有声明式”( full and delaration-only forms)
//      的形式存在。这种做法不论是否涉及 templateS 都适用 ...
// ===  六、继承与面向对象设计 ========================================
// ====================================================================
// --- 条款32:确定你的public 继承塑模出is-a 关系
// 注意：
// 1    “public继承”意味着 is-。适用于base classes身上的每一件事一定也用于 derived classes
//      身上，因为每一个 derived class对象也都是一个base class 对象 ...
// 2    is-a并非是唯一存在于classes之间的关系，另外两种常见的关系是has-a和is-implementd-in-terms-of
// --- 条款33：避免遮掩继承而来的名称
// 注意：
// 1    derived classes 内的名称会遮掩base classes 内的名称。在public继承下从来没有人希望如此
// 2    为了让被遮掩的名称再见天日，可以使用using声明式或转交函数（forwarding function）
// ====================================================================
// --- 条款34：区分借口继承和实现继承
// 注意：
// 1    接口继承和实现继承不同。在public继承之下，derived classes 总是继承base class 的接口
// 2    pure virtual 函数只具体指定接口继承（但可以调用其实现--转交函数实现）
// 3    简朴的（非纯）impure virtual 还是那户具体指定借口继承及缺省实现继承
// 4    non-virtual 函数具体指定接口继承以及强制性实现继承
// ====================================================================
// --- 条款35：考虑virtual 函数之外的其他选择 ...
// 注意：
// 1    virtual函数的替代方案包括NVI(Non-Virtual Interface)手法及Strategy设计模式的多种形式。
//      NVI手法自身是一种特殊形式的 Template Method模式(与C++ templateS 并无关联)
// 2    将机能从成员函数移到class 外部函数，带来的一个缺点就是：非成员函数无法访问non-public成员
// 3    tr1::function对象的行为就像一般函数指针。这样的对象可接纳”与给定之目标签名式兼容“的
//      所有可调用物( callable entities ) ...
// ====================================================================
// --- 条款36：绝不重新定义继承而来的non-virtual函数 ...
// 注意：
// 1    绝对不要重新定义继承而来的non-virtual函数
// ====================================================================
// --- 条款37：绝不重新定义继承而来的缺省参数值 ...
// 注意：
// 1    绝对不要重新定义继承而来的缺省参数值，因为缺省参数值都是静态绑定(编译期)，
//      而 virtual 函数--你唯一应该覆盖的东西--却是动态绑定 ...
// ====================================================================
// --- 条款38：通过复合塑模出has-a或is-implemented-in-terms-of (“根据某物实现出”)
// 注意：
// 1    复合(composition)的意义和public继承完全不同 ...
// 2    在应用域(application domain) ，复合意味 has-a。在实现域(implementation domain),复合意味
//      is-implementd-in-terms-of (根据某物实现出) . ...
// ====================================================================
// --- 条款39：明智而审慎地使用 private 继承 ...
// 注意：
// 1    private继承意味 is-implementd-in-terms-of(根据某物实现出)。它通常比复合成员(composition)
//      的级别低。但是当derived classes 需要访问 protected base class的成员，或需要重新定义继承
//      而来的 virtual 函数时，这么设计是合理的
// 2    和复合(composition)不同，private继承可以造成empty base class最优化。这对致力于“对象尺寸
//      最小化”的程序库开发者而言，可能很重要 ...
// ====================================================================
// --- 条款40：明智而审慎地使用多重继承 ...
// 注意：
// 1    多重继承比起单一继承复杂。它可能导致新的歧义，以及对virtual继承的需要。
// 2    virtual继承会增加类型大小、速度、初始化(及赋值)复杂度等等成本。如果virtual base classes
//      不带任何数据，将是最具使用价值的情况 ...
// 3    多重继承的确有正当的用途。其中一个情节涉及“public继承某个Interface class”和“private继承
//      某个协助实现 class ”的两项组合 ....

/////////////////////////////// Unit4.h ///////////////////////////////

// ===  七、模板与泛型编程  ===========================================
// ====================================================================
// --- 条款41
// 注意：了解隐式接口和编译期多态 ...
// 1    classes 和 templates 都支持接口(interfaces)和多态(polymorphism) 。
// 2    对classes而言接口是显示的(explicit)，以函数签名为中心。多态则是通过virtual函数
//      发生于程序运行期。
// 3    对templates 而言，接口的隐式的(implicit)，奠基于有效表达式。多提啊则是通过template
//      具现化和函数重载解析(function overloading resolution)发生于编译期 ...

// ====================================================================
// --- 条款42：了解typename 的双重意义
// 注意：
// 1    声明template 参数时，前缀关键字class 和typename可互换。
// 2    请使用关键字typename 标识嵌套从属类型名称；但不得在base calss lists
//      （基类列表）或member initialization list（成员初始值列表）内以它作为base class 修饰符
// ====================================================================
// --- 条款43：学习处理模板化基类内的名称
// 注意：
// 1    课在derived class templates 内通过"this->" 指涉base class templates 内的成员名称
//      或藉由一个明白写出的"base class 资格修饰符"完成。
// ====================================================================
// --- 条款44：将与参数无关的代码抽离 templates
// 注意：
// 1    Templates 生成多个classes 和 多个函数 ，所以任何template 代码都不该与某个造成膨胀
//      的tempalte参数产生相依关系 ...
// 2    因非类型模板参数(non-type tempalte parameters)而造成的代码膨胀，往往可以消除，做法
//      是以函数参数或classes 成员变量替换 template 参数 ...
// 3    因类型参数(type parameters) 而造成的代码膨胀，往往可以降低，做法是让到右完全相同
//      二进制表述(binary representations)的具体类型(instantiation types)共享实现码 ....
// ====================================================================
// --- 条款45：运用成员函数模板接受所有兼容类型 ...
// 注意：
// 1    请使用成员函数模板(member function templates) 生成”可接受所有兼容类型“的函数 ...
// 2    如果你声明了 member templates 用于 ”泛化copy 构造“或”泛化 assignment操作“，你还是需要
//      声明正常的copy 构造函数和copy assignment 操作符 ...
// ====================================================================
// --- 条款46：需要类型转换时请为模板定义非成员函数 ...参照条款24 ...
// 注意：
// 1    当我们编写一个 class template ，而它所提供之”与此template相关的”函数支持“所有参数
//      之隐式类型转换”时，请将那些函数定义为“class template内部的friend函数 “ ...
// ====================================================================
// --- 条款47：请使用traits classes表现类型类型
// 注意：
// 1：Traits classes 使得“类型相关信息”在编译期可用。它们templates和“templates特化”完成实现。
// 2：整合重载技术（overloading）后，traits classes有可能在编译期对类型执行if ... else测试。
// ====================================================================
// --- 条款48：认识template 元编程
// 注意：
// 1：Template metaprogramming(TMP ，模板元编程)可将工作由运行期移往编译期，
//    因而得以实现早期错误侦测和更高的执行效率
// 2：TMP 可被用来生成"基于策略选择组合" 的客户定制代码，也可以用来避免生成
//    对某些特殊类型并不合适的代码


/////////////////////////////// main.h ///////////////////////////////

// ===  九、杂项讨论  ===========================================
// --- 条款53：不要轻易忽视编译器的警告 ...

// --- 条款54：让自己熟悉包括TR1(Technical Report 1)在内的标准程序库 ...
//              boost -> tr1  ....
// 注意：
// 1    C++ 标准库的主要机能由 STL、iostream、locales组成。并包含C99标准程序库
// 2    TR1 增加了智能指针(例如 tr1::shared_ptr)、一般化函数指针(tr1::function)、
//      hash-based容器、正则表达式(regular rxpressions)以及另外10个组件的支持 ...
// 3    TR1自身只是一份规范。为获得TR1 提供的好处，你需要一份实物。一个好的实物
//      来源就是 Boost ...

// --- 条款55：让自己熟悉 Boost ...
// 注意：
// 1    Boost是一个社群，也是一个网站。致力于免费、源码开放、同僚复查的C++ 程序库开发。
//      Boost 在C++ 标准化过程中扮演着深具影响力的角色 ...
// 2    Boost 提供许多TR1组件实现品，以及其他许多程序库。